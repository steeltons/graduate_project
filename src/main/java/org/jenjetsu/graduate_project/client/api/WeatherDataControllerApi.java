/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.jenjetsu.graduate_project.client.api;

import org.jenjetsu.graduate_project.client.model.ApiExceptionDto;
import org.jenjetsu.graduate_project.client.model.CreateWeaterDataDto;
import java.util.UUID;
import org.jenjetsu.graduate_project.client.model.WeatherDataDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-25T12:23:41.391355525+10:00[Asia/Vladivostok]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "WeatherDataController", description = "Контроллер для работы с погодными условиями")
public interface WeatherDataControllerApi {

    /**
     * POST /api/v1/weather-data : Добавить новое погодное условие в БД
     * Endpoint на создание нового погодного условия
     *
     * @param createWeaterDataDto  (optional)
     * @return Успешное добавление погодного параметра (status code 201)
     *         or Ошибка в составлении запроса (status code 400)
     *         or Пользователь не авторизован (status code 401)
     *         or Пользователю не хватает прав (status code 403)
     *         or Ошибка на сервере (status code 500)
     */
    @Operation(
        operationId = "createWeatherData",
        summary = "Добавить новое погодное условие в БД",
        description = "Endpoint на создание нового погодного условия",
        tags = { "WeatherDataController" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Успешное добавление погодного параметра", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeatherDataDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Ошибка в составлении запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Пользователь не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Пользователю не хватает прав", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Ошибка на сервере", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/weather-data",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WeatherDataDto> createWeatherData(
        @Parameter(name = "CreateWeaterDataDto", description = "") @Valid @RequestBody(required = false) CreateWeaterDataDto createWeaterDataDto
    );


    /**
     * DELETE /api/v1/weather-data/{id} : Удалить выбранный параметр
     * Удаление выбранного параметра из системы
     *
     * @param id Id погодного параметра (required)
     * @return Успешное удаление параметра из БД (status code 200)
     *         or Отсутствие в запросе (status code 400)
     *         or Пользователь не авторизован (status code 401)
     *         or Пользователю не хватает прав (status code 403)
     *         or Ошибка на сервере (status code 500)
     */
    @Operation(
        operationId = "deleteWeatherDataById",
        summary = "Удалить выбранный параметр",
        description = "Удаление выбранного параметра из системы",
        tags = { "WeatherDataController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное удаление параметра из БД"),
            @ApiResponse(responseCode = "400", description = "Отсутствие в запросе", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Пользователь не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Пользователю не хватает прав", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Ошибка на сервере", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/weather-data/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteWeatherDataById(
        @Parameter(name = "id", description = "Id погодного параметра", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/weather-data/{id} : Получить конкретный погодный параметр
     * Получение информации о погодном параметре по id
     *
     * @param id Id погодного параметра (required)
     * @return Успешный ответ на запрос (status code 200)
     *         or Отсутствие id в запросе (status code 400)
     *         or Пользователь не авторизован (status code 401)
     *         or Пользователь не авторизован (status code 404)
     *         or Ошибка на сервере (status code 500)
     */
    @Operation(
        operationId = "getWeatherDataById",
        summary = "Получить конкретный погодный параметр",
        description = "Получение информации о погодном параметре по id",
        tags = { "WeatherDataController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ на запрос", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeatherDataDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Отсутствие id в запросе", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Пользователь не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Пользователь не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Ошибка на сервере", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/weather-data/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<WeatherDataDto> getWeatherDataById(
        @Parameter(name = "id", description = "Id погодного параметра", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/weather-data : Получить все параметры погодных условий
     * Endpoint для получения всех погодных условий
     *
     * @return Возврат списка погодных параметров (status code 200)
     *         or Пользователь не авторизован (status code 401)
     *         or Ошибка на сервере (status code 500)
     */
    @Operation(
        operationId = "getWeatherDatas",
        summary = "Получить все параметры погодных условий",
        description = "Endpoint для получения всех погодных условий",
        tags = { "WeatherDataController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Возврат списка погодных параметров", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WeatherDataDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Пользователь не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Ошибка на сервере", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/weather-data",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<WeatherDataDto>> getWeatherDatas(
        
    );


    /**
     * PATCH /api/v1/weather-data : Обновить значение метеоданной
     * Обновление одного из значения метеоданной
     *
     * @param weatherDataDto  (optional)
     * @return Успешная замена полей (status code 200)
     *         or неправильно составлен запрос (status code 400)
     *         or Пользователь не авторизован (status code 401)
     *         or Пользователю не хватает прав (status code 403)
     *         or Ошибка на сервере (status code 500)
     */
    @Operation(
        operationId = "patchWeatherData",
        summary = "Обновить значение метеоданной",
        description = "Обновление одного из значения метеоданной",
        tags = { "WeatherDataController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешная замена полей", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WeatherDataDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "неправильно составлен запрос", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Пользователь не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Пользователю не хватает прав", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Ошибка на сервере", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiExceptionDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/weather-data",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WeatherDataDto> patchWeatherData(
        @Parameter(name = "WeatherDataDto", description = "") @Valid @RequestBody(required = false) WeatherDataDto weatherDataDto
    );

}
